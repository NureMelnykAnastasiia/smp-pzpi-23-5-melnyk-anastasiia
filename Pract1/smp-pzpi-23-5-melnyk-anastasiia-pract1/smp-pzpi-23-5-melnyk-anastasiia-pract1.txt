МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з практичної роботи № 1
з дисципліни Скриптові мови програмування

   





Виконала:
ст. гр. ПЗПІ-23-5
Мельник Анастасія

Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович




Харків 2025

ЗАВДАННЯ

Написатати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу.
Наприклад таку:
     *  
    ###  
   *****  
  #######  
 *********  
    ###  
   *****  
  #######  
 *********  
    ###  
    ###  
***********  
Ялинка повинна бути симетричною.
Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких
сусідні рядки відрізняються на два символи та складаються почергово
або з символів "*" або з символів "#"
наприклад як такий:
    *  
   ###  
  *****  
 #######   
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах
вказується скрипту в його параметрах при запуску.
Параметри скрипта повинні мати додатнє значення.
Вказані значення повинні округлятися до потрібних у меншу сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо,
скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента
і повернути відповідний результат у батьківський процес.
У скрипті потрібно обовʼязково використати такі конструкції:
if ... then ... fi  
while ... do ... done  
until ... do ... done  
for ... in .. do ... done  
for ((...)); do ... done  
У скрипті також потрібно використати функцію.  
Ім'я скрипта: ~/{імʼя-облікового-запису}-task1
Приклад виклику скрипта: ~/pzpiz-26-7-shukhevych-roman-task1 16 11
Файл скрипта повинен бути виконуваним файлом для усіх користуачів системи.
Право редагувати файл скрипта повинен мати лише власник скрипта.


 ХІД РОБОТИ
     
     Для початку роботи необхідно створити Bash-скрипт. Відкриваємо термінал та створюємо файл.
     Після створення відкриваємо текстовий редактор nano, де потрібно ввести код скрипта. Після введення коду натискаємо CTRL + X, Y та ENTER, щоб зберегти файл.
     Для реалізації алгоритму друку ялинки була створена функція print_line, яка виводить рядок із заданою кількістю пробілів та символів. Це дозволяє центрувати кожен рівень ялинки:

2. print_line() {
3. local padding=$1
4. local count=$2
5. local char=$3

6. local i=0
7. while [ $i -lt $padding ]; do
8. printf " "
9. i=$((i+1))
10. done

11. local j=0
12. until [ $j -ge $count ]; do
13. printf "%s" "$char"
14. j=$((j+1))
15. done

16. printf "\n"
17. }
     Перед малюванням ялинки виконується перевірка введених параметрів, щоб уникнути помилок під час виконання скрипта:
18. if [ "$#" -ne 2 ]; then
19. echo "Error: Two arguments required." >&2
20. exit 1
21. fi
     Також скрипт перевіряє, що введені аргументи є додатними цілими числами:
22. for arg in "$@"; do
23. if ! [[ $arg =~ ^[1-9][0-9]*$ ]]; then
24. echo "Error: Arguments must be positive integers." >&2
25. exit 1
26. fi
27. done
     Щоб коректно відобразити ялинку, ширина шару снігу округлюється до непарного числа:
30. if [ $((snow_width % 2)) -eq 0 ]; then
31. snow_width=$((snow_width - 1))
32. fi
     Далі формується структура ялинки: обчислюється висота гілок, перевіряється їх правильність і розподіл між рівнями:
40. branch_height=$((height - 3))
41. tier1_rows=$(((snow_width - 1) / 2))
42. tier2_rows=$(((snow_width - 3) / 2))
     Кожен рівень ялинки формується окремими циклами, де гілки чергуються символами * та #.
49. for ((i=1; i<=tier1_rows; i++)); do
50. if [ $((i % 2)) -eq 1 ]; then
51. symbol="*"
52. else
53. symbol="#"
54. fi
55. num_symbols=$((1 + 2*(i-1)))
56. padding=$(((snow_width - num_symbols) / 2))
57. print_line "$padding" "$num_symbols" "$symbol"
58. done
     Щоб зробити файл виконуваним, використовується команда: chmod 755 ~/pzpi-23-5-melnyk-anastasiia-task1
     Перевірка прав доступу здійснюється командою: ls -l ~/pzpi-23-5-melnyk-anastasiia-task1
     Для запуску скрипта використовується команда: ~/pzpi-23-5-melnyk-anastasiia-task1 16 11
     Очікуваний результат:
             *  
            ###  
           *****  
          #######  
         *********  
            ###  
           *****  
          #######  
         *********  
            ###  
            ###  
        ***********  
     
     



ВИСНОВКИ
     
     	Розроблено Bash-скрипт для виведення симетричної ялинки. Освоєно основні конструкції Bash, зокрема умовні оператори та цикли. Проведено налаштування прав доступу до файлу. Виконано тестування, яке підтвердило коректність роботи скрипта.


ДОДАТОК А

     Код програми
1. #!/bin/bash

2. print_line() {
3. local padding=$1
4. local count=$2
5. local char=$3

6. local i=0
7. while [ $i -lt $padding ]; do
8. printf " "
9. i=$((i+1))
10. done

11. local j=0
12. until [ $j -ge $count ]; do
13. printf "%s" "$char"
14. j=$((j+1))
15. done

16. printf "\n"
17. }

18. if [ "$#" -ne 2 ]; then
19. echo "Error: Two arguments required." >&2
20. exit 1
21. fi

22. for arg in "$@"; do
23. if ! [[ $arg =~ ^[1-9][0-9]*$ ]]; then
24. echo "Error: Arguments must be positive integers." >&2
25. exit 1
26. fi
27. done

28. height=$1
29. snow_width=$2

30. if [ $((snow_width % 2)) -eq 0 ]; then
31. snow_width=$((snow_width - 1))
32. fi

33. required_height=$((snow_width + 1))
34. if [ $height -gt $required_height ]; then
35. height=$required_height
36. elif [ $height -lt $required_height ]; then
37. echo "Error: Cannot draw tree with given parameters." >&2
38. exit 1
39. fi

40. branch_height=$((height - 3))
41. tier1_rows=$(((snow_width - 1) / 2))
42. tier2_rows=$(((snow_width - 3) / 2))

43. if [ $branch_height -ne $((tier1_rows + tier2_rows)) ]; then
44. echo "Error: Inconsistent parameters." >&2
45. exit 1
46. fi

47. for ((i=1; i<=tier1_rows; i++)); do
48. if [ $((i % 2)) -eq 1 ]; then
49. symbol="*"
50. else
51. symbol="#"
52. fi
53. num_symbols=$((1 + 2*(i-1)))
54. padding=$(((snow_width - num_symbols) / 2))
55. print_line "$padding" "$num_symbols" "$symbol"
56. done

57. for ((j=1; j<=tier2_rows; j++)); do
58. if [ $((j % 2)) -eq 1 ]; then
59. symbol="#"
60. else
61. symbol="*"
62. fi
63. num_symbols=$((3 + 2*(j-1)))
64. padding=$(((snow_width - num_symbols) / 2))
65. print_line "$padding" "$num_symbols" "$symbol"
66. done

67. trunk_width=3
68. trunk_padding=$(((snow_width - trunk_width) / 2))

69. for line in 1 2; do
70. print_line "$trunk_padding" "$trunk_width" "#"
71. done

72. for ((k=0; k<1; k++)); do
73. print_line 0 "$snow_width" "*"
74. done
2


